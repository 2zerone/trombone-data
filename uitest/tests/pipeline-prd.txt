pipeline {
    agent any
    environment {
        GIT_REPO = 'http://gitlab.trombone.qa.okestro.cloud/TEST001/TEST-REPO.git'
        GIT_BRANCH = 'prd'

        HARBOR_URL = 'http://harbor.trombone.qa.okestro.cloud/'
        HARBOR_PROJECT = 'trb'
        HARBOR_IMAGE_NAME = 'member-management-service'
        HARBOR_CREDENTIALS = 'trb-harbor'

        // Remove http:// or https:// for use in Docker image paths
        HARBOR_REGISTRY = "${HARBOR_URL.replaceAll('^https?://', '').replaceAll('/$', '')}"

        K8S_SERVER = 'https://192.168.31.161:6443'
        K8S_TOKEN = '...'
        K8S_NAMESPACE = 'test-prd'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    def currentDateTime = new Date().format('yyyyMMdd-HHmm')
                    env.HARBOR_IMAGE_TAG = "${currentDateTime}"
                    env.WORK_DIR = pwd()
                }
            }
        }

    stage('Checkout Code') {
        steps {
          dir('QA-TEST-APPS') {
              checkout([$class: 'GitSCM',
                 branches: [[name: "*/${GIT_BRANCH}"]],
                  userRemoteConfigs: [[
                      url: "${GIT_REPO}",
                       credentialsId: 'trb-gitlab'
                ]]
            ])
        }
    }
}

        stage('Build with Maven') {
            steps {
                script {
                    sh "docker pull ${HARBOR_REGISTRY}/library/maven:3.8.5-jdk-17"

                    docker.image("${HARBOR_REGISTRY}/library/maven:3.8.5-jdk-17")
                          .inside('--entrypoint=""') {
                              sh """
                              cd QA-TEST-APPS
                              mvn -f pom.xml clean package -DskipTests
                              """
                          }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                    cd QA-TEST-APPS
                    ls -al
                    docker build -t ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${HARBOR_IMAGE_NAME}:${HARBOR_IMAGE_TAG} .
                    """
                }
            }
        }

        stage('Push Docker Image to Harbor') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${HARBOR_CREDENTIALS}", usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                        sh """
                        docker login ${HARBOR_URL} -u ${HARBOR_USER} -p ${HARBOR_PASS}
                        docker push ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${HARBOR_IMAGE_NAME}:${HARBOR_IMAGE_TAG}
                        docker rmi ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${HARBOR_IMAGE_NAME}:${HARBOR_IMAGE_TAG} || true
                        docker images
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh """
                    cat <<EOF > k8s-deployment-service.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: member-management-deployment-tr2
  namespace: ${K8S_NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: member-management-tr2
  template:
    metadata:
      labels:
        app: member-management-tr2
    spec:
      containers:
      - name: member-management-tr2
        image: ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${HARBOR_IMAGE_NAME}:${HARBOR_IMAGE_TAG}
        ports:
        - containerPort: 8080
        imagePullPolicy: Always
      imagePullSecrets:
      - name: harbor-regcred
---
apiVersion: v1
kind: Service
metadata:
  name: member-management-service-tr2
  namespace: ${K8S_NAMESPACE}
spec:
  type: NodePort
  selector:
    app: member-management-tr2
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
    nodePort: 32348
EOF

                    kubectl --kubeconfig=${WORK_DIR}/QA-TEST-APPS/config apply -f ${WORK_DIR}/k8s-deployment-service.yaml --validate=false
                    """
                }
            }
        }

        stage('Post-Build Actions') {
            steps {
                echo "Build, Docker image creation, Harbor push, and Kubernetes deployment completed successfully."
                echo "Deployed Docker Image: ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${HARBOR_IMAGE_NAME}:${HARBOR_IMAGE_TAG}"
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}